/* The following code was generated by JFlex 1.6.1 */

package com.myopicmobile.textwarrior.common;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>jflex/JavaFlexer.jflex</tt>
 */
public class JavaLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\104\1\5\2\0\1\4\22\0\1\104\1\70\1\101\2\0"+
    "\1\77\1\73\1\102\1\56\1\57\1\17\1\75\1\65\1\13\1\15"+
    "\1\16\1\1\1\11\6\7\2\6\1\55\1\64\1\67\1\66\1\54"+
    "\1\72\1\100\1\3\1\10\1\3\1\52\1\12\1\51\5\103\1\50"+
    "\3\103\1\14\7\103\1\2\2\103\1\62\1\0\1\63\1\76\1\53"+
    "\1\0\1\20\1\21\1\25\1\37\1\26\1\40\1\43\1\34\1\35"+
    "\1\103\1\32\1\30\1\41\1\31\1\27\1\44\1\103\1\24\1\22"+
    "\1\23\1\36\1\45\1\46\1\42\1\33\1\47\1\60\1\74\1\61"+
    "\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\20\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\1"+
    "\3\0\1\45\1\46\1\0\1\47\1\0\1\50\1\51"+
    "\1\0\1\52\1\0\1\53\1\54\31\2\1\55\2\2"+
    "\1\56\12\2\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\1\1\0\1\1\1\0\1\45\1\75\1\0\1\76"+
    "\3\77\1\0\14\2\1\100\16\2\1\101\2\2\1\102"+
    "\4\2\1\103\12\2\1\104\1\105\1\106\1\0\1\45"+
    "\2\0\4\2\1\107\7\2\1\110\1\2\1\111\1\2"+
    "\1\112\4\2\1\113\1\114\1\115\1\2\1\116\1\2"+
    "\1\117\11\2\1\120\5\2\1\121\1\2\1\122\2\2"+
    "\1\123\4\2\1\124\1\125\2\2\1\126\1\2\1\127"+
    "\1\130\1\2\1\131\10\2\1\132\1\133\1\134\5\2"+
    "\1\135\1\2\1\136\1\2\1\137\2\2\1\140\1\2"+
    "\1\141\1\142\2\2\1\143\2\2\1\144\2\2\1\145"+
    "\4\2\1\146\2\2\1\147\4\2\1\150\3\2\1\151"+
    "\1\152\1\153\1\2\1\154\1\2\1\155\1\156\2\2"+
    "\1\157\4\2\1\160\1\2\1\161\1\2\1\162\1\2"+
    "\1\163\1\2\1\164\1\165\1\2\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0114\0\u0747\0\u078c\0\u07d1\0\u07d1"+
    "\0\u07d1\0\u07d1\0\u07d1\0\u07d1\0\u07d1\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\u07d1\0\u07d1\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u07d1\0\u07d1\0\u07d1\0\u0a3e\0\u07d1\0\u0a3e\0\u0a83\0\u0a83"+
    "\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u07d1\0\u0c21\0\u07d1"+
    "\0\u0c66\0\u07d1\0\u07d1\0\u0cab\0\u0cf0\0\u0d35\0\u07d1\0\u07d1"+
    "\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d"+
    "\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185"+
    "\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad"+
    "\0\u13f2\0\u0114\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590"+
    "\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8"+
    "\0\u07d1\0\u07d1\0\u07d1\0\u07d1\0\u17fd\0\u07d1\0\u07d1\0\u07d1"+
    "\0\u07d1\0\u07d1\0\u07d1\0\u07d1\0\u07d1\0\u1842\0\u1887\0\u18cc"+
    "\0\u1911\0\u07d1\0\u07d1\0\u1956\0\u07d1\0\u0cf0\0\u199b\0\u07d1"+
    "\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3"+
    "\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u0114\0\u1d61\0\u1da6"+
    "\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce"+
    "\0\u2013\0\u2058\0\u209d\0\u20e2\0\u0114\0\u2127\0\u216c\0\u21b1"+
    "\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u0114\0\u230a\0\u234f\0\u2394"+
    "\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc"+
    "\0\u07d1\0\u07d1\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a"+
    "\0\u279f\0\u27e4\0\u0114\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d"+
    "\0\u2982\0\u29c7\0\u0114\0\u2a0c\0\u0114\0\u2a51\0\u0114\0\u2a96"+
    "\0\u2adb\0\u2b20\0\u2b65\0\u0114\0\u0114\0\u0114\0\u2baa\0\u0114"+
    "\0\u2bef\0\u0114\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d"+
    "\0\u2dd2\0\u2e17\0\u2e5c\0\u0114\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70"+
    "\0\u2fb5\0\u0114\0\u2ffa\0\u07d1\0\u303f\0\u3084\0\u0114\0\u30c9"+
    "\0\u310e\0\u3153\0\u3198\0\u0114\0\u0114\0\u31dd\0\u3222\0\u3267"+
    "\0\u32ac\0\u0114\0\u0114\0\u32f1\0\u0114\0\u3336\0\u337b\0\u33c0"+
    "\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u0114\0\u0114\0\u355e"+
    "\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u0114\0\u36fc\0\u0114"+
    "\0\u3741\0\u0114\0\u3786\0\u37cb\0\u0114\0\u3810\0\u0114\0\u0114"+
    "\0\u3855\0\u389a\0\u0114\0\u38df\0\u3924\0\u0114\0\u3969\0\u39ae"+
    "\0\u0114\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u0114\0\u3b07\0\u3b4c"+
    "\0\u0114\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u0114\0\u3ca5\0\u3cea"+
    "\0\u3d2f\0\u0114\0\u0114\0\u0114\0\u3d74\0\u0114\0\u3db9\0\u0114"+
    "\0\u0114\0\u3dfe\0\u3e43\0\u0114\0\u3e88\0\u3ecd\0\u3f12\0\u3f57"+
    "\0\u0114\0\u3f9c\0\u0114\0\u3fe1\0\u0114\0\u4026\0\u0114\0\u406b"+
    "\0\u0114\0\u0114\0\u40b0\0\u0114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\2\5\2\6\2\7\1\5\1\7\1\5"+
    "\1\10\1\5\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\5\1\23\1\24\3\5"+
    "\1\25\1\5\1\26\1\27\2\5\1\30\1\31\1\32"+
    "\1\33\4\5\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\5\1\6\4\64\2\65\73\64\1\66"+
    "\3\64\4\67\2\65\74\67\1\70\2\67\1\0\1\71"+
    "\1\72\3\0\1\73\1\71\1\74\1\71\3\0\1\75"+
    "\3\0\1\74\6\0\1\76\11\0\1\72\5\0\1\76"+
    "\35\0\3\5\2\0\5\5\1\0\1\5\3\0\34\5"+
    "\27\0\1\5\5\0\2\6\76\0\1\6\1\0\1\7"+
    "\4\0\2\7\1\0\1\7\3\0\1\75\12\0\1\76"+
    "\17\0\1\76\35\0\1\77\4\0\2\73\1\0\1\73"+
    "\1\0\1\100\1\0\1\101\36\0\1\102\11\0\1\103"+
    "\17\0\1\75\4\0\2\75\1\0\1\75\3\0\1\104"+
    "\105\0\1\105\1\106\46\0\1\107\104\0\1\110\17\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\1\5\1\111"+
    "\1\112\31\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\4\5\1\113\2\5\1\114\3\5"+
    "\1\115\20\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\3\5\1\116\7\5\1\117\1\120"+
    "\1\5\1\121\7\5\1\122\5\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\4\5\1\123"+
    "\7\5\1\124\17\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\6\5\1\125\25\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\1\126\6\5\1\127\1\130\3\5\1\131\17\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\10\5\1\132\1\133\10\5\1\134\11\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\7\5"+
    "\1\135\24\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\1\136\5\5\1\137\7\5\1\140"+
    "\15\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\11\5\1\141\6\5\1\142\1\143\12\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\6\5\1\144\1\145\24\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\1\146\6\5"+
    "\1\147\1\150\4\5\1\151\16\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\7\5\1\152"+
    "\24\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\1\153\3\5\1\154\11\5\1\155\15\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\7\5\1\156\24\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\14\5\1\157\17\5"+
    "\27\0\1\5\55\0\1\160\11\0\1\161\73\0\1\162"+
    "\222\0\1\163\104\0\1\164\1\165\103\0\1\166\104\0"+
    "\1\167\4\0\1\170\77\0\1\171\5\0\1\172\76\0"+
    "\1\173\104\0\1\174\104\0\1\175\16\0\4\64\2\0"+
    "\77\64\4\67\2\0\77\67\1\0\1\71\4\0\1\73"+
    "\1\71\1\0\1\71\3\0\1\75\12\0\1\76\17\0"+
    "\1\76\35\0\1\176\1\0\1\176\2\0\5\176\2\0"+
    "\1\177\2\0\2\176\3\0\2\176\10\0\2\176\10\0"+
    "\2\176\33\0\1\73\4\0\2\73\1\0\1\73\3\0"+
    "\1\75\70\0\1\200\7\0\1\200\74\0\1\75\4\0"+
    "\2\75\1\0\1\75\1\201\13\0\1\201\10\0\1\202"+
    "\1\203\10\0\1\203\1\202\33\0\1\73\1\204\3\0"+
    "\2\73\1\0\1\73\3\0\1\75\24\0\1\204\43\0"+
    "\1\75\4\0\2\75\1\0\1\75\110\0\1\205\67\0"+
    "\4\206\1\207\1\210\77\206\17\106\1\211\65\106\1\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\2\5\1\212"+
    "\31\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\2\5\1\213\31\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\6\5\1\214"+
    "\25\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\7\5\1\215\24\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\3\5\1\216"+
    "\30\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\1\217\3\5\1\220\27\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\11\5"+
    "\1\221\22\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\7\5\1\222\24\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\24\5"+
    "\1\223\7\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\15\5\1\224\16\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\1\225"+
    "\12\5\1\226\2\5\1\227\15\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\4\5\1\230"+
    "\10\5\1\231\16\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\3\5\1\232\30\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\2\5\1\233\1\234\30\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\11\5\1\235\22\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\1\236\33\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\1\237\33\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\2\5"+
    "\1\240\31\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\16\5\1\241\15\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\3\5"+
    "\1\242\30\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\11\5\1\243\22\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\3\5"+
    "\1\244\30\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\26\5\1\245\5\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\10\5"+
    "\1\246\23\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\2\5\1\247\1\250\30\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\24\5\1\251\7\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\20\5\1\252\13\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\16\5\1\253\15\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\10\5\1\254\23\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\4\5\1\255\27\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\7\5\1\256\24\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\11\5\1\257\22\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\3\5\1\260\30\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\5\5\1\261\26\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\7\5\1\262\5\5\1\263"+
    "\16\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\1\5\1\264\32\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\10\5\1\265"+
    "\4\5\1\266\16\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\15\5\1\267\16\5\27\0"+
    "\1\5\55\0\1\270\11\0\1\271\104\0\1\272\17\0"+
    "\1\176\1\0\1\176\2\0\5\176\2\0\1\273\2\0"+
    "\2\176\3\0\2\176\1\0\1\76\6\0\2\176\7\0"+
    "\1\76\2\176\33\0\1\273\1\0\1\273\2\0\5\273"+
    "\5\0\2\273\3\0\2\273\10\0\2\273\10\0\2\273"+
    "\33\0\1\200\7\0\1\200\16\0\1\76\17\0\1\76"+
    "\35\0\1\274\4\0\2\274\1\0\1\274\1\0\1\275"+
    "\72\0\1\276\1\0\1\276\2\0\5\276\2\0\1\177"+
    "\2\0\2\276\3\0\2\276\10\0\2\276\10\0\2\276"+
    "\37\0\1\210\77\0\16\106\1\210\1\211\65\106\1\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\3\5\1\277"+
    "\30\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\6\5\1\300\25\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\1\301\33\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\10\5\1\302\23\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\6\5\1\303\25\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\3\5\1\304\30\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\15\5\1\305\16\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\5\5\1\306\26\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\4\5\1\307\27\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\6\5\1\310\25\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\3\5\1\311\30\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\11\5\1\312\22\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\6\5\1\313\25\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\7\5\1\314\24\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\2\5\1\315\31\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\16\5\1\316\15\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\6\5\1\317\25\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\5\5\1\320\26\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\2\5\1\321\1\322"+
    "\30\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\2\5\1\323\31\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\4\5\1\324"+
    "\27\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\6\5\1\325\25\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\21\5\1\326"+
    "\12\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\6\5\1\327\25\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\23\5\1\330"+
    "\10\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\15\5\1\331\16\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\10\5\1\332"+
    "\23\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\3\5\1\333\30\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\6\5\1\334"+
    "\25\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\7\5\1\335\1\336\23\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\1\337"+
    "\33\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\1\5\1\340\32\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\2\5\1\341"+
    "\31\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\1\342\33\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\1\343\33\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\7\5\1\344\24\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\12\5\1\345\21\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\3\5\1\346\30\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\25\5\1\347\6\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\10\5\1\350\23\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\1\351\33\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\17\5"+
    "\1\352\14\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\10\5\1\353\23\5\27\0\1\5"+
    "\67\0\1\354\17\0\1\273\1\0\1\273\2\0\5\273"+
    "\1\0\1\201\3\0\2\273\3\0\2\273\10\0\2\273"+
    "\3\0\1\201\4\0\2\273\33\0\1\274\4\0\2\274"+
    "\1\0\1\274\25\0\1\202\1\203\10\0\1\203\1\202"+
    "\33\0\1\274\4\0\2\274\1\0\1\274\74\0\1\276"+
    "\1\0\1\276\2\0\5\276\2\0\1\273\2\0\2\276"+
    "\3\0\2\276\10\0\2\276\10\0\2\276\33\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\4\5\1\355\27\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\4\5\1\356\27\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\12\5\1\357\21\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\6\5\1\360\25\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\15\5\1\361\16\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\5\5\1\362\26\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\14\5\1\363\17\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\3\5\1\364\30\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\4\5\1\365\27\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\5\5\1\366\26\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\2\5\1\367\31\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\26\5\1\370\5\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\4\5\1\371\27\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\14\5\1\372\17\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\3\5\1\373\30\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\15\5\1\374\16\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\2\5\1\375\31\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\11\5\1\376\22\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\25\5\1\377\6\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\1\u0100\33\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\4\5\1\u0101\27\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\4\5\1\u0102\27\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\6\5\1\u0103\25\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\16\5\1\u0104\15\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\10\5\1\u0105\23\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\6\5\1\u0106\25\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\3\5\1\u0107\30\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\10\5\1\u0108\23\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\1\u0109\33\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\6\5"+
    "\1\u010a\25\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\1\u010b\33\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\15\5\1\u010c"+
    "\16\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\3\5\1\u010d\30\5\27\0\1\5\2\0"+
    "\3\5\2\0\5\5\1\0\1\5\3\0\6\5\1\u010e"+
    "\25\5\27\0\1\5\2\0\3\5\2\0\5\5\1\0"+
    "\1\5\3\0\1\u010f\33\5\27\0\1\5\2\0\3\5"+
    "\2\0\5\5\1\0\1\5\3\0\3\5\1\u0110\30\5"+
    "\27\0\1\5\2\0\3\5\2\0\5\5\1\0\1\5"+
    "\3\0\1\u0111\33\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\5\5\1\u0112\26\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\3\5\1\u0113\30\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\4\5\1\u0114\27\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\14\5\1\u0115\17\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\15\5\1\u0116\16\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\2\5\1\u0117\31\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\11\5\1\u0118\22\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\11\5\1\u0119\22\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\17\5\1\u011a\14\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\6\5\1\u011b\25\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\11\5\1\u011c\22\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\20\5\1\u011d\13\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\3\5\1\u011e\30\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\21\5\1\u011f\12\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\10\5\1\u0120\23\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\6\5\1\u0121\25\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\10\5\1\u0122\23\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\23\5\1\u0123\10\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\5\5\1\u0124\26\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\3\5\1\u0125\30\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\5\5\1\u0126\26\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\15\5\1\u0127\16\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\5\5\1\u0128\26\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\11\5\1\u0129\22\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\20\5\1\u012a\13\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\7\5\1\u012b\24\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\6\5\1\u012c\25\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\16\5\1\u012d\15\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\2\5\1\u012e\31\5\27\0"+
    "\1\5\2\0\3\5\2\0\5\5\1\0\1\5\3\0"+
    "\5\5\1\u012f\26\5\27\0\1\5\2\0\3\5\2\0"+
    "\5\5\1\0\1\5\3\0\1\u0130\33\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\6\5"+
    "\1\u0131\25\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\3\5\1\u0132\30\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\13\5"+
    "\1\u0133\20\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\6\5\1\u0134\25\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\3\5"+
    "\1\u0135\30\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\6\5\1\u0136\25\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\10\5"+
    "\1\u0137\23\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\3\5\1\u0138\30\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\24\5"+
    "\1\u0139\7\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\11\5\1\u013a\22\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\11\5"+
    "\1\u013b\22\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\6\5\1\u013c\25\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\6\5"+
    "\1\u013d\25\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\5\5\1\u013e\26\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\11\5"+
    "\1\u013f\22\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\6\5\1\u0140\25\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\6\5"+
    "\1\u0141\25\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\15\5\1\u0142\16\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\3\5"+
    "\1\u0143\30\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\7\5\1\u0144\24\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\6\5"+
    "\1\u0145\25\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\3\5\1\u0146\30\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\17\5"+
    "\1\u0147\14\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\27\5\1\u0148\4\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\20\5"+
    "\1\u0149\13\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\2\5\1\u014a\31\5\27\0\1\5"+
    "\2\0\3\5\2\0\5\5\1\0\1\5\3\0\6\5"+
    "\1\u014b\25\5\27\0\1\5\2\0\3\5\2\0\5\5"+
    "\1\0\1\5\3\0\17\5\1\u014c\14\5\27\0\1\5"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16629];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\33\1\10\11\3\1\2\11\5\1\3\11\1\1"+
    "\1\11\4\1\3\0\1\1\1\11\1\0\1\11\1\0"+
    "\2\11\1\0\1\1\1\0\2\11\50\1\4\11\1\1"+
    "\10\11\1\1\1\0\1\1\1\0\2\11\1\0\1\11"+
    "\2\1\1\11\1\0\57\1\2\11\1\0\1\1\2\0"+
    "\55\1\1\11\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	private static final String chString = "'([^\\\\]|\\\\[bfrtn(\\\\)]|\\\\u[0-9a-fA-F]{4})'";
	private JavaToken endChar(){
		String ch = yytext();
		if(ch.matches(chString))
			return JavaToken.CHARLITERAL;
		else
			return JavaToken.ERROR;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return JavaToken.EOF;
            }
            case 333: break;
            case STRING: {
              return JavaToken.ERROR;
            }
            case 334: break;
            case CHAR: {
              return JavaToken.ERROR;
            }
            case 335: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return JavaToken.INTLITERAL;
            }
          case 119: break;
          case 2: 
            { return JavaToken.IDENTIFIER;
            }
          case 120: break;
          case 3: 
            { return JavaToken.SPACE;
            }
          case 121: break;
          case 4: 
            { return JavaToken.SUB;
            }
          case 122: break;
          case 5: 
            { return JavaToken.DOT;
            }
          case 123: break;
          case 6: 
            { return JavaToken.SLASH;
            }
          case 124: break;
          case 7: 
            { return JavaToken.STAR;
            }
          case 125: break;
          case 8: 
            { return JavaToken.UNDERSCORE;
            }
          case 126: break;
          case 9: 
            { return JavaToken.GT;
            }
          case 127: break;
          case 10: 
            { return JavaToken.COLON;
            }
          case 128: break;
          case 11: 
            { return JavaToken.LPAREN;
            }
          case 129: break;
          case 12: 
            { return JavaToken.RPAREN;
            }
          case 130: break;
          case 13: 
            { return JavaToken.LBRACE;
            }
          case 131: break;
          case 14: 
            { return JavaToken.RBRACE;
            }
          case 132: break;
          case 15: 
            { return JavaToken.LBRACKET;
            }
          case 133: break;
          case 16: 
            { return JavaToken.RBRACKET;
            }
          case 134: break;
          case 17: 
            { return JavaToken.SEMI;
            }
          case 135: break;
          case 18: 
            { return JavaToken.COMMA;
            }
          case 136: break;
          case 19: 
            { return JavaToken.EQ;
            }
          case 137: break;
          case 20: 
            { return JavaToken.LT;
            }
          case 138: break;
          case 21: 
            { return JavaToken.BANG;
            }
          case 139: break;
          case 22: 
            { return JavaToken.TILDE;
            }
          case 140: break;
          case 23: 
            { return JavaToken.QUES;
            }
          case 141: break;
          case 24: 
            { return JavaToken.AMP;
            }
          case 142: break;
          case 25: 
            { return JavaToken.BAR;
            }
          case 143: break;
          case 26: 
            { return JavaToken.PLUS;
            }
          case 144: break;
          case 27: 
            { return JavaToken.CARET;
            }
          case 145: break;
          case 28: 
            { return JavaToken.PERCENT;
            }
          case 146: break;
          case 29: 
            { return JavaToken.MONKEYS_AT;
            }
          case 147: break;
          case 30: 
            { yybegin(STRING);
            }
          case 148: break;
          case 31: 
            { yybegin(CHAR);
            }
          case 149: break;
          case 32: 
            { return JavaToken.STRINGLITERAL;
            }
          case 150: break;
          case 33: 
            { yybegin(YYINITIAL);return JavaToken.ERROR;
            }
          case 151: break;
          case 34: 
            { yybegin(YYINITIAL);zzStartRead--;return JavaToken.STRINGLITERAL;
            }
          case 152: break;
          case 35: 
            { 
            }
          case 153: break;
          case 36: 
            { return endChar();
            }
          case 154: break;
          case 37: 
            { return JavaToken.DOUBLELITERAL;
            }
          case 155: break;
          case 38: 
            { return JavaToken.LONGLITERAL;
            }
          case 156: break;
          case 39: 
            { return JavaToken.SUBSUB;
            }
          case 157: break;
          case 40: 
            { return JavaToken.ARROW;
            }
          case 158: break;
          case 41: 
            { return JavaToken.SUBEQ;
            }
          case 159: break;
          case 42: 
            { return JavaToken.PLUSPLUS;
            }
          case 160: break;
          case 43: 
            { return JavaToken.SLASHEQ;
            }
          case 161: break;
          case 44: 
            { return JavaToken.STAREQ;
            }
          case 162: break;
          case 45: 
            { return JavaToken.IF;
            }
          case 163: break;
          case 46: 
            { return JavaToken.DO;
            }
          case 164: break;
          case 47: 
            { return JavaToken.GTGT;
            }
          case 165: break;
          case 48: 
            { return JavaToken.GTEQ;
            }
          case 166: break;
          case 49: 
            { return JavaToken.COLCOL;
            }
          case 167: break;
          case 50: 
            { return JavaToken.EQEQ;
            }
          case 168: break;
          case 51: 
            { return JavaToken.LTEQ;
            }
          case 169: break;
          case 52: 
            { return JavaToken.LTLT;
            }
          case 170: break;
          case 53: 
            { return JavaToken.BANGEQ;
            }
          case 171: break;
          case 54: 
            { return JavaToken.AMPEQ;
            }
          case 172: break;
          case 55: 
            { return JavaToken.AMPAMP;
            }
          case 173: break;
          case 56: 
            { return JavaToken.BAREQ;
            }
          case 174: break;
          case 57: 
            { return JavaToken.BARBAR;
            }
          case 175: break;
          case 58: 
            { return JavaToken.PLUSEQ;
            }
          case 176: break;
          case 59: 
            { return JavaToken.CARETEQ;
            }
          case 177: break;
          case 60: 
            { return JavaToken.PERCENTEQ;
            }
          case 178: break;
          case 61: 
            { return JavaToken.FLOATLITERAL;
            }
          case 179: break;
          case 62: 
            { return JavaToken.ELLIPSIS;
            }
          case 180: break;
          case 63: 
            { return JavaToken.COMMENT;
            }
          case 181: break;
          case 64: 
            { return JavaToken.TRY;
            }
          case 182: break;
          case 65: 
            { return JavaToken.NEW;
            }
          case 183: break;
          case 66: 
            { return JavaToken.INT;
            }
          case 184: break;
          case 67: 
            { return JavaToken.FOR;
            }
          case 185: break;
          case 68: 
            { return JavaToken.GTGTGT;
            }
          case 186: break;
          case 69: 
            { return JavaToken.GTGTEQ;
            }
          case 187: break;
          case 70: 
            { return JavaToken.LTLTEQ;
            }
          case 188: break;
          case 71: 
            { return JavaToken.BYTE;
            }
          case 189: break;
          case 72: 
            { return JavaToken.TRUE;
            }
          case 190: break;
          case 73: 
            { return JavaToken.THIS;
            }
          case 191: break;
          case 74: 
            { return JavaToken.CASE;
            }
          case 192: break;
          case 75: 
            { return JavaToken.CHAR;
            }
          case 193: break;
          case 76: 
            { return JavaToken.ELSE;
            }
          case 194: break;
          case 77: 
            { return JavaToken.ENUM;
            }
          case 195: break;
          case 78: 
            { return JavaToken.LONG;
            }
          case 196: break;
          case 79: 
            { return JavaToken.NULL;
            }
          case 197: break;
          case 80: 
            { return JavaToken.GOTO;
            }
          case 198: break;
          case 81: 
            { return JavaToken.VOID;
            }
          case 199: break;
          case 82: 
            { return JavaToken.GTGTGTEQ;
            }
          case 200: break;
          case 83: 
            { return JavaToken.BREAK;
            }
          case 201: break;
          case 84: 
            { return JavaToken.SHORT;
            }
          case 202: break;
          case 85: 
            { return JavaToken.SUPER;
            }
          case 203: break;
          case 86: 
            { return JavaToken.THROW;
            }
          case 204: break;
          case 87: 
            { return JavaToken.CATCH;
            }
          case 205: break;
          case 88: 
            { return JavaToken.CONST;
            }
          case 206: break;
          case 89: 
            { return JavaToken.CLASS;
            }
          case 207: break;
          case 90: 
            { return JavaToken.FALSE;
            }
          case 208: break;
          case 91: 
            { return JavaToken.FLOAT;
            }
          case 209: break;
          case 92: 
            { return JavaToken.FINAL;
            }
          case 210: break;
          case 93: 
            { return JavaToken.WHILE;
            }
          case 211: break;
          case 94: 
            { return JavaToken.ASSERT;
            }
          case 212: break;
          case 95: 
            { return JavaToken.STATIC;
            }
          case 213: break;
          case 96: 
            { return JavaToken.SWITCH;
            }
          case 214: break;
          case 97: 
            { return JavaToken.THROWS;
            }
          case 215: break;
          case 98: 
            { return JavaToken.RETURN;
            }
          case 216: break;
          case 99: 
            { return JavaToken.NATIVE;
            }
          case 217: break;
          case 100: 
            { return JavaToken.IMPORT;
            }
          case 218: break;
          case 101: 
            { return JavaToken.DOUBLE;
            }
          case 219: break;
          case 102: 
            { return JavaToken.PUBLIC;
            }
          case 220: break;
          case 103: 
            { return JavaToken.BOOLEAN;
            }
          case 221: break;
          case 104: 
            { return JavaToken.EXTENDS;
            }
          case 222: break;
          case 105: 
            { return JavaToken.DEFAULT;
            }
          case 223: break;
          case 106: 
            { return JavaToken.FINALLY;
            }
          case 224: break;
          case 107: 
            { return JavaToken.PACKAGE;
            }
          case 225: break;
          case 108: 
            { return JavaToken.PRIVATE;
            }
          case 226: break;
          case 109: 
            { return JavaToken.ABSTRACT;
            }
          case 227: break;
          case 110: 
            { return JavaToken.STRICTFP;
            }
          case 228: break;
          case 111: 
            { return JavaToken.CONTINUE;
            }
          case 229: break;
          case 112: 
            { return JavaToken.VOLATILE;
            }
          case 230: break;
          case 113: 
            { return JavaToken.TRANSIENT;
            }
          case 231: break;
          case 114: 
            { return JavaToken.INTERFACE;
            }
          case 232: break;
          case 115: 
            { return JavaToken.PROTECTED;
            }
          case 233: break;
          case 116: 
            { return JavaToken.INSTANCEOF;
            }
          case 234: break;
          case 117: 
            { return JavaToken.IMPLEMENTS;
            }
          case 235: break;
          case 118: 
            { return JavaToken.SYNCHRONIZED;
            }
          case 236: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
